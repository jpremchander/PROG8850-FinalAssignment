name: CI/CD Pipeline - Database Automation
run-name: ${{ github.actor }} is running Database Automation Pipeline ðŸš€

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DB_HOST: '127.0.0.1'
  DB_USER: 'root'
  DB_PASSWORD: 'Secret5555'
  DB_NAME: 'project_db'

jobs:
  database-deployment:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Secret5555
          MYSQL_DATABASE: project_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          pip install mysql-connector-python

      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -pSecret5555 --silent; then
              break
            fi
            echo 'MySQL is unavailable - sleeping'
            sleep 2
          done
          if [ "$i" = 0 ]; then
            echo 'MySQL is still unavailable - exiting'
            exit 1
          fi
          echo 'MySQL is up and running'

      - name: Stage 1 - Environment Setup Verification
        run: |
          echo "=== Environment Setup Stage ==="
          echo "MySQL Client Version:"
          mysql --version
          echo "Python Version:"
          python --version
          echo "Environment Variables:"
          echo "DB_HOST: $DB_HOST"
          echo "DB_USER: $DB_USER"
          echo "DB_NAME: $DB_NAME"
          echo "âœ… Environment setup completed successfully"

      - name: Stage 2 - Initial Schema Deployment
        run: |
          echo "=== Initial Schema Deployment Stage ==="
          echo "Creating database and ClimateData table..."
          
          # Test connection first
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD -e "SELECT 1" || exit 1
          
          # Create database
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS project_db;"
          echo "âœ… Database created"
          
          # Create ClimateData table
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          CREATE TABLE IF NOT EXISTS ClimateData (
              record_id INT PRIMARY KEY AUTO_INCREMENT,
              location VARCHAR(100) NOT NULL,
              record_date DATE NOT NULL,
              temperature FLOAT NOT NULL,
              precipitation FLOAT NOT NULL
          );"
          
          # Add indexes (check if they exist first)
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          SET @sql = (SELECT IF(
              (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
               WHERE table_schema = 'project_db' 
               AND table_name = 'ClimateData' 
               AND index_name = 'idx_location_date') > 0,
              'SELECT \"Index already exists\"',
              'CREATE INDEX idx_location_date ON ClimateData(location, record_date)'
          ));
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;"
          
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          SET @sql = (SELECT IF(
              (SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
               WHERE table_schema = 'project_db' 
               AND table_name = 'ClimateData' 
               AND index_name = 'idx_temperature') > 0,
              'SELECT \"Index already exists\"',
              'CREATE INDEX idx_temperature ON ClimateData(temperature)'
          ));
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;"
          
          echo "âœ… ClimateData table created with initial structure"

      - name: Stage 3 - Schema Update (Add Humidity Column)
        run: |
          echo "=== Schema Update Stage ==="
          echo "Adding humidity column to ClimateData table..."
          
          # Check if humidity column already exists
          COLUMN_EXISTS=$(mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -se "
          SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
          WHERE table_schema = 'project_db' 
          AND table_name = 'ClimateData' 
          AND column_name = 'humidity'")
          
          if [ "$COLUMN_EXISTS" -eq 0 ]; then
            mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
            ALTER TABLE ClimateData ADD COLUMN humidity FLOAT NOT NULL DEFAULT 50.0;"
            echo "âœ… Humidity column added successfully"
          else
            echo "âœ… Humidity column already exists"
          fi

      - name: Stage 4 - Data Seeding
        run: |
          echo "=== Data Seeding Stage ==="
          echo "Populating ClimateData table with sample data..."
          
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          INSERT INTO ClimateData (location, record_date, temperature, precipitation, humidity) VALUES
          ('Toronto', '2024-01-15', 2.5, 15.2, 75.5),
          ('Toronto', '2024-02-15', 5.0, 8.5, 68.2),
          ('Toronto', '2024-03-15', 12.5, 25.0, 65.8),
          ('Toronto', '2024-04-15', 18.2, 30.5, 62.4),
          ('Toronto', '2024-05-15', 22.8, 45.2, 58.9),
          ('Toronto', '2024-06-15', 28.5, 12.8, 55.3),
          ('Vancouver', '2024-01-15', 8.2, 85.5, 82.1),
          ('Vancouver', '2024-02-15', 10.5, 92.3, 85.7),
          ('Vancouver', '2024-03-15', 14.8, 68.9, 78.5),
          ('Vancouver', '2024-04-15', 17.2, 55.2, 72.8),
          ('Vancouver', '2024-05-15', 20.5, 35.8, 68.2),
          ('Vancouver', '2024-06-15', 24.8, 15.5, 62.5),
          ('New York', '2024-01-15', 4.5, 22.8, 72.5),
          ('New York', '2024-02-15', 7.2, 18.5, 69.8),
          ('New York', '2024-03-15', 15.8, 35.2, 66.2),
          ('New York', '2024-04-15', 20.5, 42.8, 63.5),
          ('New York', '2024-05-15', 25.2, 55.5, 60.8),
          ('New York', '2024-06-15', 30.5, 28.2, 58.2),
          ('London', '2024-01-15', 6.8, 45.2, 85.5),
          ('London', '2024-02-15', 9.2, 38.5, 82.8),
          ('London', '2024-03-15', 12.5, 42.8, 78.5),
          ('London', '2024-04-15', 16.8, 35.2, 75.2),
          ('London', '2024-05-15', 19.5, 28.5, 71.8),
          ('London', '2024-06-15', 23.2, 22.8, 68.5),
          ('Sydney', '2024-01-15', 26.5, 8.5, 65.2),
          ('Sydney', '2024-02-15', 25.8, 12.8, 68.5),
          ('Sydney', '2024-03-15', 23.2, 35.5, 72.8),
          ('Sydney', '2024-04-15', 19.8, 45.2, 75.5),
          ('Sydney', '2024-05-15', 16.5, 55.8, 78.2),
          ('Sydney', '2024-06-15', 13.2, 68.5, 82.5),
          ('Tokyo', '2024-01-15', 8.5, 15.2, 55.8),
          ('Tokyo', '2024-02-15', 11.2, 22.5, 58.2),
          ('Tokyo', '2024-03-15', 16.8, 85.5, 65.5),
          ('Tokyo', '2024-04-15', 22.5, 125.8, 72.8),
          ('Tokyo', '2024-05-15', 26.8, 155.2, 78.5),
          ('Tokyo', '2024-06-15', 28.2, 185.5, 82.2);"
          
          echo "âœ… Sample climate data inserted successfully"

      - name: Stage 5 - Concurrent Query Execution
        run: |
          echo "=== Concurrent Query Execution Stage ==="
          echo "Running multi-threaded database operations..."
          
          cd scripts
          python multi_thread_queries.py
          echo "âœ… Concurrent queries executed successfully"

      - name: Stage 6 - Validation and Verification
        run: |
          echo "=== Validation Stage ==="
          echo "Verifying database structure and data..."
          
          echo "=== Table Structure ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "DESCRIBE ClimateData;"
          
          echo "=== Column Verification ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD -e "
          SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE 
          FROM INFORMATION_SCHEMA.COLUMNS 
          WHERE TABLE_SCHEMA = 'project_db' 
          AND TABLE_NAME = 'ClimateData';"
          
          echo "=== Record Count ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "SELECT COUNT(*) as total_records FROM ClimateData;"
          
          echo "=== Location Summary ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          SELECT location, COUNT(*) as record_count 
          FROM ClimateData 
          GROUP BY location 
          ORDER BY location;"
          
          echo "=== Humidity Column Check ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          SELECT 
            MIN(humidity) as min_humidity,
            MAX(humidity) as max_humidity,
            AVG(humidity) as avg_humidity
          FROM ClimateData;"
          
          echo "=== Sample Data ==="
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "
          SELECT * FROM ClimateData ORDER BY record_id DESC LIMIT 5;"
          
          echo "âœ… All validations completed successfully"

      - name: Performance Testing Report
        run: |
          echo "=== Performance Testing Report ==="
          echo "Generating performance metrics..."
          
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD -e "
          USE project_db;
          SELECT 
            'Total Records' as Metric,
            COUNT(*) as Value
          FROM ClimateData
          UNION ALL
          SELECT 
            'Unique Locations' as Metric,
            COUNT(DISTINCT location) as Value
          FROM ClimateData
          UNION ALL
          SELECT 
            'Date Range (Days)' as Metric,
            DATEDIFF(MAX(record_date), MIN(record_date)) as Value
          FROM ClimateData;"
          
          echo "âœ… Performance report generated"

      - name: Generate Summary Report
        run: |
          echo "=== PROG8850 Database Automation Pipeline Summary ===" > pipeline_summary.txt
          echo "Execution Date: $(date)" >> pipeline_summary.txt
          echo "Repository: ${{ github.repository }}" >> pipeline_summary.txt
          echo "Branch: ${{ github.ref_name }}" >> pipeline_summary.txt
          echo "Commit: ${{ github.sha }}" >> pipeline_summary.txt
          echo "" >> pipeline_summary.txt
          echo "Pipeline Stages Completed:" >> pipeline_summary.txt
          echo "âœ… Environment Setup" >> pipeline_summary.txt
          echo "âœ… Database Schema Deployment" >> pipeline_summary.txt
          echo "âœ… Schema Update (Humidity Column)" >> pipeline_summary.txt
          echo "âœ… Data Seeding (36 Records)" >> pipeline_summary.txt
          echo "âœ… Concurrent Query Testing" >> pipeline_summary.txt
          echo "âœ… Validation and Verification" >> pipeline_summary.txt
          echo "" >> pipeline_summary.txt
          echo "Final Record Count:" >> pipeline_summary.txt
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD project_db -e "SELECT COUNT(*) as total_records FROM ClimateData;" >> pipeline_summary.txt

      - name: Upload Pipeline Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pipeline-summary
          path: pipeline_summary.txt
          retention-days: 30

      - name: Pipeline Summary
        if: always()
        run: |
          echo "=========================================="
          echo "     CI/CD PIPELINE EXECUTION SUMMARY"
          echo "=========================================="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "=========================================="
          echo "All stages completed successfully! âœ…"
          echo "Database automation pipeline executed."
          echo "=========================================="
